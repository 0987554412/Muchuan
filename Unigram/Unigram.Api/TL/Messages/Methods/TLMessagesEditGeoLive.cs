// <auto-generated/>
using System;

namespace Telegram.Api.TL.Messages.Methods
{
	/// <summary>
	/// RCP method messages.editGeoLive.
	/// Returns <see cref="Telegram.Api.TL.TLUpdatesBase"/>
	/// </summary>
	public partial class TLMessagesEditGeoLive : TLObject
	{
		[Flags]
		public enum Flag : Int32
		{
			Stop = (1 << 0),
			GeoPoint = (1 << 1),
		}

		public bool IsStop { get { return Flags.HasFlag(Flag.Stop); } set { Flags = value ? (Flags | Flag.Stop) : (Flags & ~Flag.Stop); } }
		public bool HasGeoPoint { get { return Flags.HasFlag(Flag.GeoPoint); } set { Flags = value ? (Flags | Flag.GeoPoint) : (Flags & ~Flag.GeoPoint); } }

		public Flag Flags { get; set; }
		public TLInputPeerBase Peer { get; set; }
		public Int32 Id { get; set; }
		public TLInputGeoPointBase GeoPoint { get; set; }

		public TLMessagesEditGeoLive() { }
		public TLMessagesEditGeoLive(TLBinaryReader from)
		{
			Read(from);
		}

		public override TLType TypeId { get { return TLType.MessagesEditGeoLive; } }

		public override void Read(TLBinaryReader from)
		{
			Flags = (Flag)from.ReadInt32();
			Peer = TLFactory.Read<TLInputPeerBase>(from);
			Id = from.ReadInt32();
			if (HasGeoPoint) GeoPoint = TLFactory.Read<TLInputGeoPointBase>(from);
		}

		public override void Write(TLBinaryWriter to)
		{
			UpdateFlags();

			to.Write(0x9A92304E);
			to.Write((Int32)Flags);
			to.WriteObject(Peer);
			to.Write(Id);
			if (HasGeoPoint) to.WriteObject(GeoPoint);
		}

		private void UpdateFlags()
		{
			HasGeoPoint = GeoPoint != null;
		}
	}
}